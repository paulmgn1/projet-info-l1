import tkinter as tk
import socket
import threading
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

print("Client démarré")

SERVER_HOST = '127.0.0.1'  # Adresse IP du serveur
SERVER_PORT = 55555         # Port du serveur
KEY = b'Sixteen byte key'   # Clé de chiffrement

def encrypt_message(message, key):
    iv = get_random_bytes(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(pad(message.encode(), AES.block_size))
    return iv + ciphertext

def decrypt_message(encrypted_message, key):
    iv = encrypted_message[:AES.block_size]
    ciphertext = encrypted_message[AES.block_size:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_message = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted_message.decode()

def receive_messages(client_socket, text_messages):
    try:
        while True:
            data = client_socket.recv(1024)
            decrypted_data = decrypt_message(data, KEY)
            text_messages.insert(tk.END, "\nServer: " + decrypted_data)
    except:
        pass

def send_message(client_socket, text_input):
    try:
        message = text_input.get("1.0", tk.END).strip()
        if message:
            encrypted_message = encrypt_message(message, KEY)
            client_socket.send(encrypted_message)
            if message.lower() == 'exit':
                client_socket.close()
                root.quit()
    except Exception as e:
        print("Erreur lors de l'envoi du message:", e)

def main():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((SERVER_HOST, SERVER_PORT))

    # Créer la fenêtre principale
    root = tk.Tk()
    root.title("Client Chat")

    # Zone de texte pour afficher les messages
    text_messages = tk.Text(root)
    text_messages.pack()

    # Zone de texte pour que l'utilisateur saisisse les messages
    text_input = tk.Text(root, height=5)
    text_input.pack()

    # Bouton d'envoi de message
    button_send = tk.Button(root, text="Envoyer", command=lambda: send_message(client_socket, text_input))
    button_send.pack()

    # Démarrer un thread pour la réception de messages
    receive_thread = threading.Thread(target=receive_messages, args=(client_socket, text_messages))
    receive_thread.start()

    # Fonction pour fermer la connexion lorsque l'application se ferme
    def close_connection():
        client_socket.close()
        root.quit()

    root.protocol("WM_DELETE_WINDOW", close_connection)

    # Lancer l'interface utilisateur
    root.mainloop()

if __name__ == "__main__":
    main()
